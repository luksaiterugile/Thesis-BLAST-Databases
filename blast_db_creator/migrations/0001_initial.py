# Generated by Django 4.2.1 on 2023-05-24 19:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BatchAlign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_db_index', models.SlugField(max_length=100)),
                ('db_type', models.CharField(choices=[('nucl', 'Nucleotide'), ('prot', 'Protein')], max_length=12)),
            ],
        ),
        migrations.CreateModel(
            name='BlastDBData',
            fields=[
                ('zip_file', models.FileField(upload_to='')),
                ('slug', models.SlugField(primary_key=True, serialize=False)),
                ('father_database', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blast_db_creator.blastdbdata')),
            ],
        ),
        migrations.CreateModel(
            name='UserInput',
            fields=[
                ('public_or_private', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='public', max_length=12)),
                ('input_file', models.FileField(upload_to='users_inputs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['fasta'])])),
                ('database_type', models.CharField(choices=[('nucl', 'Nucleotide'), ('prot', 'Protein')], default='nucl', max_length=12)),
                ('input_type', models.CharField(choices=[('fasta', 'Fasta')], default='fasta', max_length=12)),
                ('name_of_blast_db', models.CharField(error_messages={'unique': 'This database name already exists.'}, max_length=100, primary_key=True, serialize=False)),
                ('database_title', models.CharField(blank=True, max_length=200)),
                ('parse_seqids', models.BooleanField(blank=True)),
                ('hash_index', models.BooleanField(blank=True)),
                ('blastdb_version', models.CharField(choices=[('4', '4'), ('5', '5')], default='4', max_length=12)),
                ('taxid', models.CharField(blank=True, max_length=300)),
                ('taxid_map', models.FileField(blank=True, upload_to='user_taxid_files/')),
                ('created', models.DateTimeField(editable=False, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UpdateBlastDB',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_file_input', models.FileField(blank=True, upload_to='blast_db_updates/')),
                ('updated_file_text', models.TextField(blank=True, max_length=300000)),
                ('update_alignments', models.BooleanField()),
                ('database', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.blastdbdata')),
                ('user_input', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.userinput')),
            ],
        ),
        migrations.CreateModel(
            name='tBlastxUserInput',
            fields=[
                ('query_location', models.CharField(blank=True, max_length=100)),
                ('output_filename', models.SlugField(error_messages={'unique': 'Provided output filename already exists.'}, max_length=100, primary_key=True, serialize=False)),
                ('evalue', models.FloatField(default=10, max_length=20)),
                ('word_size', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2, message='Ensure word size is greater than             or equal to 2. ')])),
                ('show_gis', models.BooleanField(blank=True)),
                ('line_length', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(1, message='Ensure line length is greater than                 or equal to 1.')])),
                ('sort_hits', models.CharField(blank=True, choices=[('0', 'Sort by evalue'), ('1', 'Sort by bit score'), ('2', 'Sort by total score'), ('3', 'Sort by percent identity'), ('4', 'Sort by query coverage')], max_length=40)),
                ('sort_hsps', models.CharField(blank=True, choices=[('0', 'Sort by hsp evalue'), ('1', 'Sort by hsp score'), ('2', 'Sort by hsp query start'), ('3', 'Sort by hsp percent identity'), ('4', 'Sort by hsp subject start')], max_length=40)),
                ('soft_masking', models.BooleanField(default=False)),
                ('lcase_masking', models.BooleanField(blank=True)),
                ('qcov_hsp_perc', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure percent query coverage                  per hsp is greater than or equal to 0.'), django.core.validators.MaxValueValidator(100, message='Ensure percent query coverage                 per hsp is less than or equal to 100.')])),
                ('max_hsps', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1, message='Ensure maximum number of the HSPs                 is greater than or equal to 1.')])),
                ('subject_besthit', models.BooleanField(blank=True)),
                ('max_target_seqs', models.IntegerField(default=500, validators=[django.core.validators.MinValueValidator(1, message='Ensure maximum number of aligned                 sequences to keep is greater than or equal to 0.'), django.core.validators.MaxValueValidator(5000, message='Ensure maximum number of aligned                 sequences to keep is less than or equal to 5000.')])),
                ('created', models.DateTimeField(editable=False, null=True)),
                ('parse_deflines', models.BooleanField(blank=True)),
                ('query_file', models.FileField(upload_to='tblastx_user_inputs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['fasta'])])),
                ('strand', models.CharField(choices=[('both', 'Both'), ('minus', 'Minus'), ('plus', 'Plus')], default='both', max_length=12)),
                ('matrix', models.CharField(choices=[('PAM30', 'PAM30'), ('PAM70', 'PAM70'), ('BLOSUM80', 'BLOSUM80'), ('BLOSUM62', 'BLOSUM62'), ('BLOSUM50', 'BLOSUM50'), ('BLOSUM45', 'BLOSUM45'), ('PAM250', 'PAM250'), ('BLOSUM90', 'BLOSUM90')], default='BLOSUM62', max_length=100)),
                ('threshold', models.FloatField(blank=True, max_length=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure minimum word score is                 greater than or equal to 0.')])),
                ('gilist', models.FileField(blank=True, upload_to='tblastx_inputs_parameters/')),
                ('seqidlist', models.FileField(blank=True, upload_to='tblastx_inputs_parameters/')),
                ('negative_gilist', models.FileField(blank=True, upload_to='tblastx_inputs_parameters/')),
                ('negative_seqidlist', models.FileField(blank=True, upload_to='tblastx_inputs_parameters/')),
                ('taxids', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('negative_taxids', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('taxidlist', models.FileField(blank=True, upload_to='tblastx_inputs_parameters/')),
                ('negative_taxidlist', models.FileField(blank=True, upload_to='tblastx_inputs_parameters/')),
                ('batch_align', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.batchalign')),
                ('database', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tblastxdatabase', to='blast_db_creator.blastdbdata')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='tBlastxResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tblastx_result', models.FileField(upload_to='')),
                ('tblastx_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.tblastxuserinput')),
            ],
        ),
        migrations.CreateModel(
            name='tBlastnUserInput',
            fields=[
                ('query_location', models.CharField(blank=True, max_length=100)),
                ('output_filename', models.SlugField(error_messages={'unique': 'Provided output filename already exists.'}, max_length=100, primary_key=True, serialize=False)),
                ('evalue', models.FloatField(default=10, max_length=20)),
                ('word_size', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2, message='Ensure word size is greater than             or equal to 2. ')])),
                ('show_gis', models.BooleanField(blank=True)),
                ('line_length', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(1, message='Ensure line length is greater than                 or equal to 1.')])),
                ('sort_hits', models.CharField(blank=True, choices=[('0', 'Sort by evalue'), ('1', 'Sort by bit score'), ('2', 'Sort by total score'), ('3', 'Sort by percent identity'), ('4', 'Sort by query coverage')], max_length=40)),
                ('sort_hsps', models.CharField(blank=True, choices=[('0', 'Sort by hsp evalue'), ('1', 'Sort by hsp score'), ('2', 'Sort by hsp query start'), ('3', 'Sort by hsp percent identity'), ('4', 'Sort by hsp subject start')], max_length=40)),
                ('soft_masking', models.BooleanField(default=False)),
                ('lcase_masking', models.BooleanField(blank=True)),
                ('qcov_hsp_perc', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure percent query coverage                  per hsp is greater than or equal to 0.'), django.core.validators.MaxValueValidator(100, message='Ensure percent query coverage                 per hsp is less than or equal to 100.')])),
                ('max_hsps', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1, message='Ensure maximum number of the HSPs                 is greater than or equal to 1.')])),
                ('subject_besthit', models.BooleanField(blank=True)),
                ('max_target_seqs', models.IntegerField(default=500, validators=[django.core.validators.MinValueValidator(1, message='Ensure maximum number of aligned                 sequences to keep is greater than or equal to 0.'), django.core.validators.MaxValueValidator(5000, message='Ensure maximum number of aligned                 sequences to keep is less than or equal to 5000.')])),
                ('created', models.DateTimeField(editable=False, null=True)),
                ('parse_deflines', models.BooleanField(blank=True)),
                ('query_file', models.FileField(upload_to='tblastn_user_inputs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['fasta'])])),
                ('task', models.CharField(choices=[('tblastn', 'tBLASTn'), ('tblastn-fast', 'tBLASTn-fast')], default='tblastn', max_length=20)),
                ('gap_open', models.IntegerField(blank=True, null=True)),
                ('gap_extend', models.IntegerField(blank=True, null=True)),
                ('threshold', models.FloatField(blank=True, max_length=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure minimum word score is                 greater than or equal to 0.')])),
                ('max_intron_length', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure length of the largest             intron allowed is greater than or equal to 0.')])),
                ('gilist', models.FileField(blank=True, upload_to='tblastn_inputs_parameters/')),
                ('seqidlist', models.FileField(blank=True, upload_to='tblastn_inputs_parameters/')),
                ('negative_gilist', models.FileField(blank=True, upload_to='tblastn_inputs_parameters/')),
                ('negative_seqidlist', models.FileField(blank=True, upload_to='tblastn_inputs_parameters/')),
                ('taxids', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('negative_taxids', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('taxidlist', models.FileField(blank=True, upload_to='tblastn_inputs_parameters/')),
                ('negative_taxidlist', models.FileField(blank=True, upload_to='tblastn_inputs_parameters/')),
                ('batch_align', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.batchalign')),
                ('database', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tblastndatabase', to='blast_db_creator.blastdbdata')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='tBlastnResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tblastn_result', models.FileField(upload_to='')),
                ('tblastn_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.tblastnuserinput')),
            ],
        ),
        migrations.CreateModel(
            name='BlastxUserInput',
            fields=[
                ('query_location', models.CharField(blank=True, max_length=100)),
                ('output_filename', models.SlugField(error_messages={'unique': 'Provided output filename already exists.'}, max_length=100, primary_key=True, serialize=False)),
                ('evalue', models.FloatField(default=10, max_length=20)),
                ('word_size', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2, message='Ensure word size is greater than             or equal to 2. ')])),
                ('show_gis', models.BooleanField(blank=True)),
                ('line_length', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(1, message='Ensure line length is greater than                 or equal to 1.')])),
                ('sort_hits', models.CharField(blank=True, choices=[('0', 'Sort by evalue'), ('1', 'Sort by bit score'), ('2', 'Sort by total score'), ('3', 'Sort by percent identity'), ('4', 'Sort by query coverage')], max_length=40)),
                ('sort_hsps', models.CharField(blank=True, choices=[('0', 'Sort by hsp evalue'), ('1', 'Sort by hsp score'), ('2', 'Sort by hsp query start'), ('3', 'Sort by hsp percent identity'), ('4', 'Sort by hsp subject start')], max_length=40)),
                ('soft_masking', models.BooleanField(default=False)),
                ('lcase_masking', models.BooleanField(blank=True)),
                ('qcov_hsp_perc', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure percent query coverage                  per hsp is greater than or equal to 0.'), django.core.validators.MaxValueValidator(100, message='Ensure percent query coverage                 per hsp is less than or equal to 100.')])),
                ('max_hsps', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1, message='Ensure maximum number of the HSPs                 is greater than or equal to 1.')])),
                ('subject_besthit', models.BooleanField(blank=True)),
                ('max_target_seqs', models.IntegerField(default=500, validators=[django.core.validators.MinValueValidator(1, message='Ensure maximum number of aligned                 sequences to keep is greater than or equal to 0.'), django.core.validators.MaxValueValidator(5000, message='Ensure maximum number of aligned                 sequences to keep is less than or equal to 5000.')])),
                ('created', models.DateTimeField(editable=False, null=True)),
                ('parse_deflines', models.BooleanField(blank=True)),
                ('query_file', models.FileField(upload_to='blastx_user_inputs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['fasta'])])),
                ('strand', models.CharField(choices=[('both', 'Both'), ('minus', 'Minus'), ('plus', 'Plus')], default='both', max_length=12)),
                ('matrix', models.CharField(choices=[('PAM30', 'PAM30'), ('PAM70', 'PAM70'), ('BLOSUM80', 'BLOSUM80'), ('BLOSUM62', 'BLOSUM62'), ('BLOSUM50', 'BLOSUM50'), ('BLOSUM45', 'BLOSUM45'), ('PAM250', 'PAM250'), ('BLOSUM90', 'BLOSUM90')], default='BLOSUM62', max_length=100)),
                ('task', models.CharField(choices=[('blastx', 'BLASTx'), ('blastx-fast', 'BLASTx-fast')], default='blastx', max_length=20)),
                ('gap_open', models.IntegerField(blank=True, null=True)),
                ('gap_extend', models.IntegerField(blank=True, null=True)),
                ('threshold', models.FloatField(blank=True, max_length=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure minimum word score is                 greater than or equal to 0.')])),
                ('max_intron_length', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure length of the largest             intron allowed is greater than or equal to 0.')])),
                ('gilist', models.FileField(blank=True, upload_to='blastx_inputs_parameters/')),
                ('seqidlist', models.FileField(blank=True, upload_to='blastx_inputs_parameters/')),
                ('negative_gilist', models.FileField(blank=True, upload_to='blastx_inputs_parameters/')),
                ('negative_seqidlist', models.FileField(blank=True, upload_to='blastx_inputs_parameters/')),
                ('taxids', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('negative_taxids', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('taxidlist', models.FileField(blank=True, upload_to='blastx_inputs_parameters/')),
                ('negative_taxidlist', models.FileField(blank=True, upload_to='blastx_inputs_parameters/')),
                ('batch_align', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.batchalign')),
                ('database', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blastxdatabase', to='blast_db_creator.blastdbdata')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlastxResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blastx_result', models.FileField(upload_to='')),
                ('blastx_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.blastxuserinput')),
            ],
        ),
        migrations.CreateModel(
            name='BlastpUserInput',
            fields=[
                ('query_location', models.CharField(blank=True, max_length=100)),
                ('output_filename', models.SlugField(error_messages={'unique': 'Provided output filename already exists.'}, max_length=100, primary_key=True, serialize=False)),
                ('evalue', models.FloatField(default=10, max_length=20)),
                ('word_size', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2, message='Ensure word size is greater than             or equal to 2. ')])),
                ('show_gis', models.BooleanField(blank=True)),
                ('line_length', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(1, message='Ensure line length is greater than                 or equal to 1.')])),
                ('sort_hits', models.CharField(blank=True, choices=[('0', 'Sort by evalue'), ('1', 'Sort by bit score'), ('2', 'Sort by total score'), ('3', 'Sort by percent identity'), ('4', 'Sort by query coverage')], max_length=40)),
                ('sort_hsps', models.CharField(blank=True, choices=[('0', 'Sort by hsp evalue'), ('1', 'Sort by hsp score'), ('2', 'Sort by hsp query start'), ('3', 'Sort by hsp percent identity'), ('4', 'Sort by hsp subject start')], max_length=40)),
                ('soft_masking', models.BooleanField(default=False)),
                ('lcase_masking', models.BooleanField(blank=True)),
                ('qcov_hsp_perc', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure percent query coverage                  per hsp is greater than or equal to 0.'), django.core.validators.MaxValueValidator(100, message='Ensure percent query coverage                 per hsp is less than or equal to 100.')])),
                ('max_hsps', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1, message='Ensure maximum number of the HSPs                 is greater than or equal to 1.')])),
                ('subject_besthit', models.BooleanField(blank=True)),
                ('max_target_seqs', models.IntegerField(default=500, validators=[django.core.validators.MinValueValidator(1, message='Ensure maximum number of aligned                 sequences to keep is greater than or equal to 0.'), django.core.validators.MaxValueValidator(5000, message='Ensure maximum number of aligned                 sequences to keep is less than or equal to 5000.')])),
                ('created', models.DateTimeField(editable=False, null=True)),
                ('parse_deflines', models.BooleanField(blank=True)),
                ('query_file', models.FileField(upload_to='blastp_user_inputs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['fasta'])])),
                ('task', models.CharField(choices=[('blastp', 'BLASTp'), ('blastp-fast', 'BLASTp-fast'), ('blastp-short', 'BLASTp-short')], default='blastp', max_length=20)),
                ('gap_open', models.IntegerField(blank=True, null=True)),
                ('gap_extend', models.IntegerField(blank=True, null=True)),
                ('matrix', models.CharField(choices=[('PAM30', 'PAM30'), ('PAM70', 'PAM70'), ('BLOSUM80', 'BLOSUM80'), ('BLOSUM62', 'BLOSUM62'), ('BLOSUM50', 'BLOSUM50'), ('BLOSUM45', 'BLOSUM45'), ('PAM250', 'PAM250'), ('BLOSUM90', 'BLOSUM90')], default='BLOSUM62', max_length=100)),
                ('threshold', models.FloatField(blank=True, max_length=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure minimum word score is                 greater than or equal to 0.')])),
                ('gilist', models.FileField(blank=True, upload_to='blastp_inputs_parameters/')),
                ('seqidlist', models.FileField(blank=True, upload_to='blastp_inputs_parameters/')),
                ('negative_gilist', models.FileField(blank=True, upload_to='blastp_inputs_parameters/')),
                ('negative_seqidlist', models.FileField(blank=True, upload_to='blastp_inputs_parameters/')),
                ('taxids', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('negative_taxids', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('taxidlist', models.FileField(blank=True, upload_to='blastp_inputs_parameters/')),
                ('negative_taxidlist', models.FileField(blank=True, upload_to='blastp_inputs_parameters/')),
                ('batch_align', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.batchalign')),
                ('database', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blastpdatabase', to='blast_db_creator.blastdbdata')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlastpResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blastp_result', models.FileField(upload_to='')),
                ('blastp_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.blastpuserinput')),
            ],
        ),
        migrations.CreateModel(
            name='BlastnUserInput',
            fields=[
                ('query_location', models.CharField(blank=True, max_length=100)),
                ('output_filename', models.SlugField(error_messages={'unique': 'Provided output filename already exists.'}, max_length=100, primary_key=True, serialize=False)),
                ('evalue', models.FloatField(default=10, max_length=20)),
                ('word_size', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(2, message='Ensure word size is greater than             or equal to 2. ')])),
                ('show_gis', models.BooleanField(blank=True)),
                ('line_length', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(1, message='Ensure line length is greater than                 or equal to 1.')])),
                ('sort_hits', models.CharField(blank=True, choices=[('0', 'Sort by evalue'), ('1', 'Sort by bit score'), ('2', 'Sort by total score'), ('3', 'Sort by percent identity'), ('4', 'Sort by query coverage')], max_length=40)),
                ('sort_hsps', models.CharField(blank=True, choices=[('0', 'Sort by hsp evalue'), ('1', 'Sort by hsp score'), ('2', 'Sort by hsp query start'), ('3', 'Sort by hsp percent identity'), ('4', 'Sort by hsp subject start')], max_length=40)),
                ('soft_masking', models.BooleanField(default=False)),
                ('lcase_masking', models.BooleanField(blank=True)),
                ('qcov_hsp_perc', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure percent query coverage                  per hsp is greater than or equal to 0.'), django.core.validators.MaxValueValidator(100, message='Ensure percent query coverage                 per hsp is less than or equal to 100.')])),
                ('max_hsps', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1, message='Ensure maximum number of the HSPs                 is greater than or equal to 1.')])),
                ('subject_besthit', models.BooleanField(blank=True)),
                ('max_target_seqs', models.IntegerField(default=500, validators=[django.core.validators.MinValueValidator(1, message='Ensure maximum number of aligned                 sequences to keep is greater than or equal to 0.'), django.core.validators.MaxValueValidator(5000, message='Ensure maximum number of aligned                 sequences to keep is less than or equal to 5000.')])),
                ('created', models.DateTimeField(editable=False, null=True)),
                ('parse_deflines', models.BooleanField(blank=True)),
                ('query_file', models.FileField(upload_to='blastn_user_inputs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['fasta'])])),
                ('strand', models.CharField(choices=[('both', 'Both'), ('minus', 'Minus'), ('plus', 'Plus')], default='both', max_length=12)),
                ('task', models.CharField(choices=[('blastn', 'BLASTn'), ('blastn-short', 'BLASTn-short'), ('dc-megablast', 'Dc-megaBLAST'), ('megablast', 'MegaBLAST')], default='megablast', max_length=20)),
                ('gap_open', models.IntegerField(blank=True, null=True)),
                ('gap_extend', models.IntegerField(blank=True, null=True)),
                ('reward', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure reward for a nucleotide                 match is greater than or equal to 0.')])),
                ('penalty', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(0, message='Ensure penalty for a nucleotide                 mismatch is greater than or equal to 0.')])),
                ('gilist', models.FileField(blank=True, upload_to='blastn_inputs_parameters/')),
                ('seqidlist', models.FileField(blank=True, upload_to='blastn_inputs_parameters/')),
                ('negative_gilist', models.FileField(blank=True, upload_to='blastn_inputs_parameters/')),
                ('negative_seqidlist', models.FileField(blank=True, upload_to='blastn_inputs_parameters/')),
                ('taxids', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('negative_taxids', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')])),
                ('taxidlist', models.FileField(blank=True, upload_to='blastn_inputs_parameters/')),
                ('negative_taxidlist', models.FileField(blank=True, upload_to='blastn_inputs_parameters/')),
                ('perc_identity', models.FloatField(blank=True, max_length=10, null=True, validators=[django.core.validators.MinValueValidator(0, message='Ensure percent identity is                 greater than or equal to 0.'), django.core.validators.MaxValueValidator(100, message='Ensure percent identity is                 less than or equal to 100.')])),
                ('batch_align', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.batchalign')),
                ('database', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blastndatabase', to='blast_db_creator.blastdbdata')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlastnResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blastn_result', models.FileField(upload_to='')),
                ('blastn_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.blastnuserinput')),
            ],
        ),
        migrations.AddField(
            model_name='blastdbdata',
            name='user_input',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.userinput'),
        ),
        migrations.AddField(
            model_name='batchalign',
            name='database',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.blastdbdata'),
        ),
        migrations.AddField(
            model_name='batchalign',
            name='user_input',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blast_db_creator.userinput'),
        ),
    ]
